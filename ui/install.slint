/* Copyright © 2021 SixtyFPS GmbH <info@sixtyfps.info>
 * SPDX-License-Identifier: MIT OR Apache-2.0
 */

import {
    ComboBox, VerticalBox, HorizontalBox, GridBox, Button,
    LineEdit, ListView, GroupBox, CheckBox
} from "std-widgets.slint";

import { CratesCompletionData } from "crates_completion.slint";

export struct InstalledCrate := {
    name: string,
    version: string,
    // when not null, this is the version to upgrate to
    new_version: string,
    queued: bool,
    status: string,
    progress: bool,
}

export global CargoInstallData := {
    callback upgrade_all();
    callback upgrade(string);
    callback install(string);
    callback uninstall(string);
    property<[InstalledCrate]> crates;
}

export CargoInstallView := GridBox {

    property <bool> completion_shown;

    // This is kind of a hack to get animated progressbar and have an animation that runs forever
    property <float> animated : 0.;
    animate animated {
        duration: 2s;
        iteration-count: -1.;
    }
    callback ensure-start-animation;
    ensure-start-animation => {
        if (animated < 0.001) { animated = 1; }
    }

    Row {
        Text {
            // The animated binding there is a workaround so it fetches it
            text: "Currently installed packages";
            horizontal-stretch: 1;
            vertical-alignment: center;
        }
        Button {
            text: "🔄 Upgrade all";
            clicked => {
                CargoInstallData.upgrade_all();
                ensure-start-animation();
            }
        }
    }
    ListView {
        colspan: 2;
        for crate in CargoInstallData.crates: VerticalLayout {
            HorizontalBox {
                crate_name := Text {
                    text: {crate.name};
                    vertical-alignment: center;
                }
                Text {
                    text: {crate.version};
                    vertical-alignment: center;
                    color: crate.new_version == "" ? crate_name.color : red;
                }
                if !crate.queued : Rectangle {}

                if (!crate.queued &&  crate.new_version != "") : Button {
                    text: "🔄 Upgrade to " + crate.new_version;
                    clicked => {
                        crate.queued = true;
                        CargoInstallData.upgrade(crate.name);
                        ensure-start-animation();
                    }
                }
                if !crate.queued : Button {
                    text: "🗑️ Uninstall";
                    clicked => {
                        crate.queued = true;
                        CargoInstallData.uninstall(crate.name);
                        ensure-start-animation();
                    }
                }
                if crate.queued: Text {
                    text: crate.status != "" ? crate.status : "Queued...";
                    horizontal-stretch: 1;
                    overflow: elide;
                    horizontal-alignment: right;
                }
            }
            if crate.queued : Rectangle {
                height: crate_name.preferred_height;
                Rectangle {
                    width: parent.width / 2;
                    x: parent.width - width - 6px;
                    height: parent.height - 6px;
                    property <color> col1 : #2320db;
                    property <color> col2 : #4fa4dd;
                    background: animated < 0.25 ? @linear-gradient(90deg, col1 0%, col1 animated*4, col2 100%)
                                : animated < 0.5  ? @linear-gradient(90deg, col2 0%, col1 animated*4 - 1, col1 100%)
                                : animated < 0.75 ? @linear-gradient(90deg, col2 0%, col2 animated*4 - 2, col1 100%)
                                :                   @linear-gradient(90deg, col1 0%, col2 animated*4 - 3, col2 100%);
                }
            }
        }
    }
    Row {
        install-le := LineEdit {
            placeholder-text: "Package to install";
            accepted(text) => {
                CargoInstallData.install(install-le.text);
                ensure-start-animation();
                self.text = "";
                completion_shown = false;
            }
            edited => {
                CratesCompletionData.update_completion(text);
                completion_shown = text != "";
            }
            if completion_shown && CratesCompletionData.completions.length > 0 : Rectangle {
                background: white;
                y: -height - 6px;
                height: min(install-le.y - 12px, inner_layout.preferred-height);
                drop-shadow-color: #8888;
                drop-shadow-offset-x: 1px;
                drop-shadow-offset-y: 1px;
                drop-shadow-blur: 5px;
                border-radius: 5px;
                clip: true;
                inner_layout := VerticalBox {
                    y: parent.height - preferred-height;
                    width: 100%;
                    alignment: end;
                    for crate in CratesCompletionData.completions: Rectangle {
                        background: inner-touch.has-hover ? lightgray : transparent;
                        height: inner_text.height;
                        inner_text := Text {
                            width: 100%;
                            text: crate;
                            color: black;
                            overflow: elide;
                        }
                        inner_touch := TouchArea {
                            clicked => {
                                install-le.text = crate;
                                completion_shown = false;
                            }
                        }
                    }
                }
            }
            /*completion := PopupWindow {
                height: install-le.y - 12px;
                y: - install-le.y - 6px;
                width: parent.width;

                Rectangle {
                    background: white;
                    drop-shadow-color: #8888;
                    drop-shadow-offset-x: 1px;
                    drop-shadow-offset-y: 1px;
                    drop-shadow-blur: 5px;
                    border-radius: 5px;
                }
            }*/
        }
        Button {
            text: "📀 Install";
            clicked => {
                CargoInstallData.install(install-le.text);
                ensure-start-animation();
                install-le.text = "";
                completion_shown = false;
            }
        }
    }
}
